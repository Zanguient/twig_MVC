TOTARA INSTALL PROCESS
======================

Before installing Totara you should have a server with:
* A supported OS - Windows or Linux (Ubuntu, Debian, Suse, Redhat), Solaris10, other Unix variant
* System clock synchronised with internet time servers.
* Functional outbound email
* Supported webserver software (Apache 2.x.x or IIS only at this stage although nginx should also work)
* PHP (5.3.2 minimum).
* Required PHP modules: iconv, curl, ctype, zip, simplexml, spl, pcre, dom, xml, json
* Recommended PHP modules: mbstring, openssl, tokenizer, xmlrpc, soap, gd, intl
* PHP Memory limit of at least 40MB (64MB or more recommended)
* Access to a supported database (Postgres 8.3 or greater, Mysql 5.0.25 or greater, MSSQL 2008 or greater).
  If your database is Postgres you must set standard_conforming_strings to off and escape_string_warning to off in your postgresql.conf file
* A domain name that resolves to your server

1. Create directories on your server for www files ('wwwroot' - allow for 1GB) and sitedata files ('sitedata' - allow for 10GB).
   Ensure the sitedata directory is outside the wwwroot.
   Ensure that the sitedata directory is writeable by the web server process
2. Configure your webserver to serve requests for your domain from the wwwroot directory.
3. Move the Totara source code into the wwwroot directory.
4. Create an empty database using the UTF8 character set.
   For postgres: createdb -E utf8 [dbname]
   For mysql: CREATE DATABASE [dbname] DEFAULT CHARACTER SET utf8 COLLATE utf8_unicode_ci;

   See http://docs.moodle.org/20/en/Create_Moodle_site_database for details
   Ensure that you have a non-root database user with write access to the database

5. Using your web browser, visit your domain and step through the installation process.
6. Set up a cron task to call the file admin/cron.php every fifteen minutes.
7. Set up a root cron task to call the file admin/cron_watcher.php every five minutes.
   The cron watcher script needs to be called *directly*, not by fetching the page through the web server (e.g. using wget or similar)
   as it needs sufficient permissions to be able to kill the cron process if it has crashed. This would normally
   be done using a command like this on the crontab:
   php /path/to/site/admin/cron_watcher.php > /path/to/logs/watcher.log 2>&1
8. Setting PHP variables
   There are some PHP configuration variables that may need to be customised, depending on your needs. The variables that are commonly changed
   include "memory_limit", "upload_max_filesize", "post_max_size", "max_input_vars" and "upload_tmp_dir".

   memory_limit - This will need to be increased for restoring large course backups or unzipping large files within Totara
   upload_max_filesize - This setting in conjuction with "post_max_size" will determine how high you can set the max upload size within Totara
   max_input_vars - This setting will need to be increased to a minimum of 2000 if you would like to customise any of the Totara language packs.
   upload_tmp_dir - Some customers may wish to enable this setting and specifically set a directory where files are temporarily stored during the upload process. Note the web server user must have permissions to write files in this directory, or all file uploads will fail.

   These settings are all located in php.ini. See http://php.net/manual/en/ini.core.php for more information (note that you will need to restart your
   webserver for these settings to take effect).
